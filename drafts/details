emulator/interpreter
disassembler

Memory
	4096 1-byte addresses

	0x000 - 0x200	interpreter/fonts
	0x201 - 0xe9f	free space
	0xea0 - 0xeff	call stack/internal use/ variables
	0xf00 - 0xfff	display refresh

Registers
	V0 - VE			1-byte general purpose registers
	VF				1-byte flag
	I				2-byte address register
	DT				delay Timer
	ST				sound Timer
	K				keyboard keys	0 - F
	PC				program counter
	SP				stack pointer

Graphics
	screen
	64 x 32			pixels

	sprites
	8 x 1 - 15		pixels

	display
	sprite XOR screen pixels
	VF = pixels_flipped ? 1 : 0

	sound
	play if sound timers is not 0

Opcodes
	0nnn	sys		$0xnnn				nop
	00e0	cls							display_clear
	00ee	rts							flow_return_subroutine

	1nnn	jmp 	$0xNNN				flow_jmp					no_offset

	2nnn	call	$0xNNN				call

	3xkk	seq		@VX, #0xNN			flow_skip_eq				regval_const

	4xkk	sneq	@VX, #0xNN			flow_skip_neq				regval_const

	5xy0	seq		@VX, @VY			flow_skip_eq				regval_regval

	6xkk	mov		@VX, #0xNN			data_move					regadr_const

	7xkk	add		@VX, #0xNN			math_add					regadr_const

	8xy0	mov		@VX, @VY			data_move					regadr_regval
	8xy1	or		@VX, @VY			bitwise_or
	8xy2	and		@VX, @VY			bitwise_and
	8xy3	xor		@VX, @VY			bitwise_xor
	8xy4	add		@VX, @VY			math_add					regadr_regval
	8xy5	sub		@VX, @VY			math_sub					right
	8xy6	shr		@VX					bitwise_shift_right
	8xy7	sub		@VX, @VY			math_sub					left
	8xye	shl		@VX					bitwise_shift_left

	9xy0	sneq	@VX, @VY			flow_skip_neq				regval_regval

	annn	mov		$I, $0xNNN			data_move					iadr_const

	bnnn	jmp		@V0, $0xNNN			flow_jmp					offset

	cxkk	rnd		@VX, #0xNN			math_rand

	dxyn	dsp		@VX, @VY, #0xN		display_draw

	ex9e	skp		@VX					flow_skip_keyp
	exa1	sknp	@VX					flow_skip_keynp

	fx07	mov		$VX, @DT			data_move					regadr_dtval
	fx0a	mov		$VX, $K				data_move					regadr_kval
	fx15	mov		$DT, @VX			data_move					dtadr_regval
	fx18	mov		$ST, @VX			data_move					stadr_regval
	fx1e	add		$I, @VX				math_add					iadr_regval
	fx29	mov		$I, @VX				data_move					iadr_regval
	fx33	mov		[I], @VX			data_move					iarr_regval
	fx55	mov		[I], $VX			data_move					iarr_regadr
	fx65	mov		[VX], $I			data_move					regarr_iadr
